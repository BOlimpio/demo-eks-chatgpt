pipeline {
    agent any
    parameters {
        choice(name: 'TERRAFORM_ACTION', choices: ['Create/Update', 'Destroy'], description: 'What action will be performed with Terraform? ')
        string(name: 'Email', defaultValue: 'you@example.com', description: 'Who will receive the status of pipeline execution?')
    }
    tools {
       terraform 'Terraform'
    }
    stages {
        // stage('Checkout Terraform Code') {
        //     steps {
        //         checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-credentials', url: 'https://github.com/user/terraform-repo.git']]])
        //     }
        // }
        stage('Verify Infracost Installation') {
            when {
                expression { params.TERRAFORM_ACTION == 'Create/Update' }
            }  
            steps {
                dir('terraform') {
                    sh '''
                    if ! [ -x "$(command -v infracost)" ]; then
                        echo "Infracost is not installed. Installing Infracost."
                        curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sudo bash
                    else
                        echo "Infracost is already installed."
                    fi
                    '''
                }
            }
        }
        stage('Verify TFLint Installation') {
            when {
                expression { params.TERRAFORM_ACTION == 'Create/Update' }
            }
            steps {
                dir('terraform') {
                    sh '''
                    if ! [ -x "$(command -v tflint)" ]; then
                        echo "TFLint is not installed. Installing TFLint."
                        curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | sudo bash
                    else
                        echo "TFLint is already installed."
                    fi
                    '''
                }
            }
        }
        stage('Validate Terraform Code') {
            steps {
                dir('terraform') {
                    withAWS(credentials: 'aws-bruno-credencials'){
                        sh "terraform init"
                        sh "terraform validate"  
                    }
                }
            }
        }
        stage('Test Terraform Deployment') {
            when {
                expression { params.TERRAFORM_ACTION == 'Create/Update' }
            }  
            steps {
                dir('terraform') {
                    withAWS(credentials: 'aws-bruno-credencials'){
                        sh "terraform plan -out=plan.out"
                        sh "tflint"
                        sh "infracost breakdown --path plan.out" 
                    }
                }
            }
        }
        stage('Approve Terraform Deployment') {
            when {
                expression { params.TERRAFORM_ACTION == 'Create/Update' }
            }  
            steps {
                dir('terraform') {
                    withAWS(credentials: 'aws-bruno-credencials'){
                        input message: 'Do you want to apply this Terraform plan?', ok: 'Apply', id: 'approve_terraform_deployment', submitter: 'anyone', parameters: [timeout(time: 5, unit: 'MINUTES')]
                        sh "terraform apply plan.out"
                    }
                }
            }
            post {
                failure {
                    echo "No action was taken within the time frame. The pipeline has been refused."
                }
            }
        }
        stage('Destroy Terraform Deployment') {
            when {
                expression { params.TERRAFORM_ACTION == 'Destroy' }
            }
            steps {
                dir('terraform') {
                    withAWS(credentials: 'aws-bruno-credencials'){
                        input message: 'Do you want to destroy the Terraform infrastructure?', ok: 'Destroy', id: 'approve_terraform_deployment', submitter: 'anyone', parameters: [timeout(time: 5, unit: 'MINUTES')]
                        //input message: 'Do you want to destroy the Terraform infrastructure?', ok: 'Destroy', id: 'approve_terraform_deployment', timeout: 10, submitter: 'anyone'
                        sh "terraform destroy -auto-approve"
                    }
                }
            }
            post {
                failure {
                    echo "No action was taken within the time frame. The pipeline has been refused."
                }
            }
        }
    }    
    post {
        success {
            emailext attachmentsPattern: '', 
            body: "The pipeline '${env.JOB_NAME} [${env.BUILD_NUMBER}]' completed successfully by ${env.BUILD_CAUSE_USERID}.\n\n" + 
                "Pipeline URL: ${env.BUILD_URL}\n\n" + 
                "Build Number: ${env.BUILD_NUMBER}\n" + 
                "Start Time: ${env.BUILD_ID}\n" + 
                "End Time: ${currentBuild.currentTime}\n" + 
                "Duration: ${currentBuild.durationString}\n" + 
                "Status: Success\n", 
            subject: "Jenkins pipeline '${env.JOB_NAME} [${env.BUILD_NUMBER}]' - Success", 
            to: "${params.Email}"
        }
        failure {
            emailext attachmentsPattern: '', 
            body: "The pipeline '${env.JOB_NAME} [${env.BUILD_NUMBER}]' failed by ${env.BUILD_CAUSE_USERID}.\n\n" + 
                "Pipeline URL: ${env.BUILD_URL}\n\n" + 
                "Build Number: ${env.BUILD_NUMBER}\n" + 
                "Start Time: ${env.BUILD_ID}\n" + 
                "End Time: ${currentBuild.currentTime}\n" + 
                "Duration: ${currentBuild.durationString}\n" + 
                "Status: Failure\n" + 
                "Error Message: ${currentBuild.result}\n", 
            subject: "Jenkins pipeline '${env.JOB_NAME} [${env.BUILD_NUMBER}]' - Failure", 
            to: "${params.Email}"
        }
    }
}

// configure smtp server in yout outlook account